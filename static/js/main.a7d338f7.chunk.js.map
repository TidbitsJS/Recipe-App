{"version":3,"sources":["components/recipe.module.css","components/assets/food.jpeg","components/Recipe.js","components/Nofood.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","healthTags","useState","show","setShow","className","style","recipe","head","src","alt","showBtn","onClick","textAlign","Math","round","list","map","ingredient","index","key","margin","text","health","tag","tags","Nofood","fontSize","food","marginBottom","App","recipes","setRecipes","search","setSearch","query","setQuery","URL","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","length","label","healthLabels","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a7d338f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__1IG3a\",\"image\":\"recipe_image__234HM\",\"title\":\"recipe_title__uTl0w\",\"list\":\"recipe_list__5m3Ok\",\"showBtn\":\"recipe_showBtn__1nq3l\",\"head\":\"recipe_head__KJ59d\",\"health\":\"recipe_health__23Qxa\",\"tags\":\"recipe_tags__1Q5y0\"};","module.exports = __webpack_public_path__ + \"static/media/food.8daaaa38.jpeg\";","import React, { useState } from 'react'\nimport style from 'components/recipe.module.css'\n\nconst Recipe = ({ title, calories, image, ingredients, healthTags }) => {\n    const [show, setShow] = useState(false)\n\n    const showDetails = () => {\n        setShow(!show)\n    }\n\n    return (\n        <div className={style.recipe}>\n            <div className={style.head}>\n            \n                <h1 className={style.title}>{title}</h1>\n                <img src={image} className={style.image} alt=\"recipe\" /> \n                <button className={style.showBtn} \n                    onClick={showDetails}>\n                    {show ? 'Hide' : 'View'}\n                </button>\n\n            </div>\n            { show ? (\n               <div>\n                 <h3 style={{textAlign: 'center'}}>Calories: {Math.round(calories)} Kcal </h3>\n                  <ol className={style.list}>\n                      {ingredients.map((ingredient, index) => (\n                         <li key={index} style={{ margin: '0.7rem 0' }}>{ingredient.text}</li>\n                      ) )}\n                  </ol>\n                  <div className={style.health}>\n                    {healthTags.map((tag, index) => (\n                        <button key={index+tag} className={style.tags}>{tag}</button>\n                    ))}\n                  </div>\n               </div>\n            ) : null }\n        </div>\n    )\n}\n\nexport default Recipe\n","import React, { useState } from 'react'\nimport food from 'components/assets/food.jpeg'\nimport style from 'components/recipe.module.css'\n\nconst Nofood = () => {\n    const [show, setShow] = useState(false) \n    return (\n        <div>\n          <div className={style.recipe}>\n            <div className={style.head}>\n            \n                <h1 className={style.title} style={{fontSize: 23}}>Yummy Tummy</h1>\n                <img src={food} \n                     className={style.image} alt=\"recipe\" /> \n                <button className={style.showBtn}\n                        style={{marginBottom: 5 }} \n                        onClick={() => setShow(!show)}>\n                    {show ? 'Hide' : 'View'}\n                </button>\n\n                {show ? (\n                    <h3>No food Recipe</h3>\n                ) : null}\n\n            </div>\n          </div> \n        </div>\n    )\n}\n\nexport default Nofood\n","import React, { useEffect, useState } from 'react';\nimport 'App.css';\nimport Recipe from 'components/Recipe';\nimport Nofood from 'components/Nofood';\n\nconst App = () => {\n  const [recipes, setRecipes] = useState([])\n  const [search, setSearch] = useState('')\n  const [query, setQuery] = useState('aloo')\n \n  const APP_ID = '7142ae22'\n  const APP_KEY = 'e151efaa7cc6e928f1687c34b2fc0ec6'\n  const URL = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n \n  useEffect(() => {\n     getRecipes()\n  }, [query])\n \n  const getRecipes = async () => {\n    const response = await fetch(URL)\n    const data =  await response.json()\n    setRecipes(data.hits)\n    console.log(data.hits)\n  }\n\n  const getSearch = e => {\n    e.preventDefault()\n    setQuery(search)\n    setSearch('')\n  }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input type=\"text\" \n               className=\"search-bar\"\n               value={search}\n               onChange={(e) => setSearch(e.target.value)} />\n        <button type=\"submit\" className=\"search-button\">Search</button>\n      </form>\n\n      <div className=\"recipes\">\n        { recipes.length === 0 ? <Nofood />\n            : recipes.map((recipe, index) => (\n          <Recipe \n            key={recipe.recipe.label+index} \n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n            healthTags={recipe.recipe.healthLabels} />\n        )) }\n      </div>\n\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}